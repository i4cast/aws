>>> help(LMDFM)

help(LMDFM)
Help on class LMDFM in module LMDFM:

class LMDFM(builtins.object)
 |  LMDFM(len_learn_window=None, var_order=None, num_factors=None, forecast_type=3, shock_list={}, max_forecast_step=1, target_type='Original', fwd_cumsum=False)
 |  
 |  Long-Memory Dynamic Factor Model (LMDFM) for
 |  (1) analysis of observed multiple (vector) time-series,
 |  (2) multi-step forecasts of multivariate (vector) time-
 |      series, and
 |  (3) multi-step forecasts of multivariate volatility
 |      (variance-covariance matrix) of vector time-series
 |  
 |  DFM Framework
 |  -------------
 |  
 |  Acronyms
 |      VAR : vector autoregressive model of multiple time-series
 |      DFM : dynamic factor model of multiple time-series
 |      LMDFM : long-memory dynamic factor model
 |  
 |  Notations - observed time-series
 |      y(t) : observed time-series of n-by-1 data vector y with
 |             time index t
 |      c : n-by-1 mean vector of time-series y(t)
 |      n : number of individual time-series
 |  
 |  Notations - factor scores
 |      f(t) : time-series of m-by-1 dynamic factor score vector
 |             f with time index t
 |      m : number of factors or of factor score time-series
 |  
 |  Notations - estimated time-series
 |      z(t) : time-series of n-by-1 common component vector of
 |             observed y(t)
 |      u(t) : time-series of n-by-1 idiosyncratic component
 |             vector of y(t)
 |      v(t) : time-series of m-by-1 variance vector of error
 |             in VAR prediction of dynamic factor score f(t)
 |  
 |  Notations - estimated coefficients
 |      X(j) : n-by-m matrix of loadings of j-lag factors f(t-j)
 |             on observed data y(t)
 |      A(k) : m-by-m matrix of vector autoregressive coefficients
 |             of dynamic factor f(t)
 |      G(j) : m-by-n matrix of structural VAR coefficients of
 |             observed data y(t) and factor f(t)
 |      B(k) : n-by-n matrix of vector autoregressive coefficients
 |             of observed data y(t)
 |  
 |  Parameter values
 |      c = 0 : assuming y(t) are zero-mean vector time-series
 |      t = 0, 1, 2, ..., T
 |      T : last time-stamp
 |      1 <= m < n
 |  
 |  Parameter values
 |      j = 0, 1, 2, ..., p
 |      k = 1, 2, ..., p
 |      p : vector autoregressive order
 |  
 |  State space representation of dynamic factor model DFM
 |      Measurement equation of observed vector time-series y(t)
 |      State equation of factor loadings X(t) and scores f(t)
 |  
 |  Two forms of DFM estimated by LMDFM
 |      DFM of Form I
 |      DFM of Form II
 |  
 |  Factor loadings, X(j), estimated by LMDFM for DFM of Form I
 |      y(t) = X(0) f(t) + X(1) f(t-1) + ... + X(p) f(t-p) + u(t)
 |      f(t) = g(e(t))
 |  
 |  Factor VAR coefficients, A(k), by LMDFM for DFM of Form II
 |      y(t) = X f(t) + u(t)
 |      f(t) = A(1) f(t-1) + A(2) f(t-2) + ... + A(p) f(t-p) + v(t)
 |  
 |  Notes on factor loadings
 |      Loadings matrix X in Form II is NOT the same as loadings
 |          matrix X(0) in Form I
 |  
 |  Notes on factor scores
 |      Function g() of white-noise random variable e(t) in Form I
 |          not identified by LMDFM algorithm
 |  
 |  Long-memory
 |  -----------
 |  
 |  Long-memory DFM
 |      Vector autoregressive order p >> 1
 |  
 |  LMDFM Method
 |  ------------
 |  
 |  Acronyms
 |      LMDFM: long-memory dynamic factor model
 |      DFT: discrete Fourier transform
 |      1D-DFT: 1-dimensional DFT
 |      2D-DFT: 2-dimensional DFT
 |      PCA : principal components analysis
 |  
 |  Methodolgy
 |      * The LMDFM (long-memory dynamic factor model) is
 |        estimated by an implementation of dynamic principal
 |        components analysis (DPCA), reviewed by Doz and
 |        Fuleky (2020), with 2-dimensional discrete Fourier
 |        transforms (2D-DFTs) summarized as follows.
 |      * Estimating variance-covariance matrixes (VCMs) and
 |        autocovariance matrixes (ACMs) of observed vector
 |        (i.e. multiple) time-series.
 |      * Combining VCMs and ACMs by applying 2-dimensional
 |        discrete Fourier transforms (2D-DFTs) on VCMs and
 |        ACMs.
 |      * Referring resulted transforms (by 2D-DFT) as
 |        spectral density matrixes (SDMs).
 |      * Applying principal components analysis (PCA) on
 |        each of the SDMs.
 |      * Estimating principal components (PCs) of original
 |        VCMs and ACMs by applying inverse 2D-DFTs on PC-
 |        represented (dimension-reduced) SDMs.
 |      * This way, PCs of each of original VCMs and ACMs
 |        contain dynamic information from all of VCMs and
 |        ACMs.
 |      * If observed vector time-series can be reasonably
 |        assumed as locally stationary, the 2D-DFTs become
 |        simplified as weighted 1-dimensional DFTs, 
 |        exactly the same "weights of the Bartlett window"
 |        shown by Doz and Fuleky (2020).
 |  
 |  Benefits
 |      * Avoiding over-fitting when estimating long-memory
 |        dynamic factor model of large order p >> 1
 |  
 |  Additional Estimates by LMDFM
 |  -----------------------------
 |  
 |  Structural VAR matrix, G(l), estimated by LMDFM
 |      G(0) y(t) + G(1) y(t-1) + ... + G(p) y(t-p) = f(t)
 |  
 |  Notes on structural VAR
 |      In structural VAR format, G(L) y(t) = f(t)
 |          G(L) is truncated approximation of inverse Inv[X(L)]
 |      Factors are estimated by structural VAR formulation
 |          f(t) = G(0) y(t) + G(1) y(t-1) + ... + G(p) y(t-p)
 |  
 |  DFM-based VAR model of observed vector time-series y(t)
 |      y(t) = B(1) y(t-1) + B(2) y(t-2) + ... + B(p) y(t-p) + u(t)
 |  
 |  Notes on DFM-based VAR model
 |      VAR coefficient matrix: B(k) = BL BR(k)
 |      Left multiplier matrix: BL = Inv(I - X G(0)) X
 |          here matrix X is factor loadings in DFM of form II
 |      Right multiplier matrix: BR(k) = G(k)
 |  
 |  Vector time-series forecasts
 |  ----------------------------
 |  
 |  Four types of forecasts by LMDFM algorithm
 |      1. DFM forecasts, by DFM Form I
 |      2. VAR-factor forecasts, by DFM Form II
 |      3. Hybrid forecasts, by combining DFM Forms I and II
 |      4. VAR model forecasts, by DFM-based VAR model
 |      Default. Hybrid forecasts
 |  
 |  s-Step forecast by Type 1, DFM forecasts
 |      f(t+s-k) = 0 for s > k
 |      y(t+s) = X(0) f(t+s) + X(1) f(t+s-1) + ... + X(p) f(t+s-p)
 |  
 |  s-Step forecast by Type 2, VAR-factor forecasts
 |      f(t+s) = A(1) f(t+s-1) + A(2) f(t+s-2) + ... + A(p) f(t+s-p)
 |      y(t+s) = X f(t+s)
 |  
 |  s-Step forecast by Type 3, hybrid forecasts
 |      f(t+s) = A(1) f(t+s-1) + A(2) f(t+s-2) + ... + A(p) f(t+s-p)
 |      y(t+s) = X(0) f(t+s) + X(1) f(t+s-1) + ... + X(p) f(t+s-p)
 |  
 |  s-Step forecast by Type 4, VAR model forecasts
 |      z(t+s) = B(1) z(t+s-1) + B(2) z(t+s-2) + ... + B(p) z(t+s-p)
 |             = BL [ BR(1) z(t+s-1) + ... + BR(p) z(t+s-p) ]
 |      y(t+s) = z(t+s)
 |      f(t+s) = G(0) y(t+s) + G(1) y(t+s-1) + ... + G(p) y(t+s-p)
 |  
 |  Default type, hybrid forecasts (Type 3)
 |      f(t+s) = A(1) f(t+s-1) + A(2) f(t+s-2) + ... + A(p) f(t+s-p)
 |      y(t+s) = X(0) f(t+s) + X(1) f(t+s-1) + ... + X(p) f(t+s-p)
 |  
 |  Note:
 |      s-Step forecast of random errors
 |          u(t+s|t) = 0
 |          v(t+s|t) = 0
 |      Using realized data when k >= s, i.e. s-k <= 0
 |          f(t+s-k|t) = f(t+s-k)
 |          y(t+s-k|t) = y(t+s-k)
 |          z(t+s-k|t) = z(t+s-k)
 |  
 |  Shock response forecast
 |  -----------------------
 |  
 |  Notations
 |      h(t) : n-by-1 shock vector, h, at time t
 |      r(t+s) : time-series of n-by-1 response vector r(t+s)
 |  
 |  Values
 |      h(t) : one element = 1, primary shock
 |             other element(s) < 1, if any, correlated shock(s)
 |      h(t-k) = 0 for k >= 1
 |  
 |  Values
 |      r(t) = h(t)
 |      r(t-k) = 0 for k >= 0
 |  
 |  Impulse/shock response by forecast type 4
 |      r(t+s) = B(1) r(t+s-1) + B(2) r(t+s-2) + ... + B(p) r(t+s-p)
 |  
 |  Note:
 |      Using realized data when k >= s, i.e. s-k <= 0
 |          r(t|t) = h(t)
 |          r(t+s-k|t) = r(t+s-k)
 |  
 |  Variance-covariance forecast
 |  ----------------------------
 |  
 |  Model approximation assumption and constraint:
 |      covariance of j-th factor and k-th residual is zero
 |          Cov( f(j,t1), u(k,t2) ) = E( f(j,t1) u(k,t2) ) = 0
 |              for all j, k, t1, t2 
 |  
 |  Model approximation assumption and constraint:
 |      factor f(j2,t) = linear combination of u(k,t) of all k
 |          Cov( f(j1,t1), f(j2,t2) ) = E( f(j1,t1) f(j2,t2) ) = 0
 |              for j2 > j1, and for all t1, t2 
 |  
 |  Variance of dynamic factor score time-series
 |      Var( f(t-j) ) = V(t-j,0) : m-by-m diagonal matrix
 |      time-index-lag j = 0, 1, 2, ..., p
 |  
 |  k-Lag autocovariance of dynamic factor scores
 |      Cov( f(t-j), f(t-j-k) ) = E( f(t-j) f(t-j-k)' ) = V(t-j,k) :
 |          m-by-m diagonal matrix
 |      time-sample-lag k = 1, 2, ..., p; j+k <= p
 |  
 |  Autocovariance of dynamic factor scores
 |      Cov( f(t-j-k), f(t-j) ) = Cov( f(t-j), f(t-j-k) ) = V(t-j,k)
 |      Cov( f(t-j1), f(t-j2) ) = V(t-min(j1,j2), abs(j1-j2))
 |      j1, j2 = 1, 2, ..., p
 |  
 |  DFM of Form II estimated by LMDFM algorithm
 |      y(t) = X f(t) + u(t)
 |      f(t) = A(1) f(t-1) + A(2) f(t-2) + ... + A(p) f(t-p) + v(t)
 |  
 |  s-Step forecast of dynamic factor scores
 |      f(t+s) = A(1) f(t+s-1) + ... + A(p) f(t+s-p) + v(t+s)
 |  
 |  Notes on error in VAR prediction of dynamic factor scores
 |      Var( v(t) ) = Var(
 |          A(1) f(t-1) + A(2) f(t-2) + ... + A(p) f(t-p) - f(t) )
 |      if not calculated, v(t+s) = 0
 |      if not calculated, Var( v(t+s) ) = Var( v(t) )
 |  
 |  Notes on idiosyncratic component vector time-series
 |      if not calculated, u(t+s) = 0
 |      if not calculated, Var( u(t+s) ) = Var( u(t) )
 |      if not calculated, E( u(t+s) u(t+s-k)' ) = 0
 |  
 |  s-Step forecast of variance of dynamic factor scores
 |      V(t+s,0) = diag( sum(
 |          A(min(j1,j2)) V(t+s-min(j1,j2), abs(j1-j2)) A(max(j1,j2))' ;
 |          j1, j2 = 1, 2, ... ) + Var( v(t) ) )
 |  
 |  s-Step forecast of k-lag autocovariance of dynamic factors
 |      V(t+s,k) = diag( sum(
 |          A(j) V(t+s-min(j,k), abs(j-k)) ; j = 1, ..., p ) )
 |      k = 1, 2, ..., p
 |  
 |  s-Step forecast of variance-covariance matrix of observed data y(t)
 |        Var( y(t+s) ) = E( y(t+s) y(t+s)' )
 |      = E( X f(t+s) f(t+s)' X' ) + Var( u(t+s) )
 |      = X V(t+s,0) X' + Var( u(t) )
 |  
 |  s-Step forecast of k-lag autocovariance matrix of observed y(t)
 |        Cov( y(t+s), y(t+s-k) ) = E( y(t+s) y(t+s-k)' )
 |      = E( X f(t+s) f(t+s-k)' X' ) + E( u(t+s) u(t+s-k)' )
 |      = X V(t+s,k) X'
 |  
 |  References
 |  ----------
 |  
 |  J. Stock and M. Watson (2016). "Chapter 8. Dynamic Factor Models,
 |  Factor-Augmented Vector Autoregressions, and Structural Vector
 |  Autoregressions in Macroeconomics", in Handbook of Macroeconomics,
 |  Volume 2A, pp. 415-525. Ed: J. Taylor and H. Uhlig. Elsevier B.V.,
 |  2016. http://www.princeton.edu/~mwatson/papers/Stock_Watson_HOM_Vol2
 |  https://www.sciencedirect.com/handbook/handbook-of-macroeconomics/vol/2/
 |  
 |  K. Barhoumi, O. Darné and L. Ferrara (2017). "Chapter 10.
 |  Dynamic Factor Models: A Review of the Literature", in
 |  Handbook on Rapid Estimtates, pp. 287-320. Ed: G.L. Mazzi and
 |  D. Ladirayc. Publications Office of the European Union, 2017.
 |  https://op.europa.eu/en/publication-detail/-/publication/4a5046d2-f4f1-11e7-be11-01aa75ed71a1
 |  
 |  C. Doz & P. Fuleky (2020). "Chapter 2. Dynamic Factor Models",
 |  in Macroeconomic Forecasting in the Era of Big Data: Theory
 |  and Practice, pp. 27-64. Ed: P. Fuleky. Springer Nature, 2020.
 |  https://www.springer.com/gp/book/9783030311490  or manuscript
 |  https://halshs.archives-ouvertes.fr/halshs-02262202/document
 |  
 |  Data: observed vector time-series
 |  ---------------------------------
 |  
 |  VTS : pandas.DataFrame,
 |          index (ts_list), columns (observed_asof_list)
 |      Observed vector time-series
 |      Row time-series of column vector with first column
 |          as oldest and last one as latest
 |      Input of method set_data(VTS) for LMDFM model learning
 |          and inference
 |  
 |  ts_list : list
 |      List of time-series name/symbol/label string
 |  
 |  observed_asof_list : list
 |      List of as-of time-stamp of observed time-series
 |  
 |  num_ts : int >= 1
 |      Number of time-series = len(ts_list)
 |  
 |  len_ts : int > 1
 |      Length of time-series = len(observed_asof_list)
 |  
 |  Learning parameters
 |  -------------------
 |  
 |  len_learn_window : int >> 1
 |      Length of trailing time window of data points
 |          for model learning
 |  
 |  var_order : int >= 1
 |      Vector autoregressive order, p
 |      Notes:
 |          var_order <= len_learn_window
 |          len_ts >= len_learn_window + (3 var_order)
 |  
 |  num_factors : int >= 1
 |      Number of factors of dynamic factor model DFM
 |      Notes:
 |          num_factors < min(len_learn_window, num_ts)
 |  
 |  notes:
 |      Resetting any learning parameters makes the object
 |      as a NEW object, which need fit() again
 |  
 |  Inference parameters
 |  --------------------
 |  
 |  forecast_type : int {1, 2, 3, 4} (default = 3)
 |      Type of formulas to forecast factors and vector time-series
 |      If 1: DFM forecasts, by DFM Form I
 |      If 2: VAR-factor forecasts, by DFM Form II
 |      If 3: hybrid forecasts, by DFM Froms I and II
 |      If 4: VAR model forecasts, by DFM-based VAR model
 |  
 |  shock_list : dict {ts1id: val1, ts2id: val2, ...}
 |      List of shock(s) specified as shock_list = {
 |          ts1_id: val_ts1, ts2_id: val_ts2, ...}
 |  
 |  max_forecast_step : int >= 1
 |      Maximum number of forecasting steps of time-series
 |          forecasts, or shock-response time-series, or
 |          variance-covariance matrix forecasts
 |  
 |  target_type : str, in [
 |          's', 'S', 'standardized', 'b', 'B', 'base-case',
 |          'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |      Specified type of vector, or multiple, time-series data
 |          on which model inferences, predictions or forecasts
 |          are made, and are evaluated
 |      If 's', 'S', 'standardized', 'b', 'B' or 'base-case':
 |          Inferences/forecasts are made/evaluated on
 |          standardized, or base-case, values of observed
 |          vector time-series
 |      If 'z', 'Z' or 'zero-mean':
 |          Inferences/forecasts are made/evaluated on zero-
 |          mean, or de-meaned, values of observed vector
 |          time-series
 |      If 'o', 'O' or 'original':
 |          Inferences/forecasts are made/evaluated on values
 |          of original/observed vector time-series
 |  
 |  fwd_cumsum : bool (True, or False)
 |      Whether or not to make cum-sum forecast
 |  
 |  Attributes
 |  ----------
 |  
 |  asof : time-stamp object
 |      Last time-stamp of observed vector time-series data
 |          utilized in estimation of values in object obj
 |      Examples:
 |          obj['asof'] = asof
 |              when isinstance(obj, type(dict()))
 |          obj.loc['asof'] = asof
 |              when isinstance(obj, type(pd.Series()))
 |          obj.loc[:, 'asof'] = asof
 |              when isinstance(obj, type(pd.DataFrame()))
 |          obj.name = asof
 |              when isinstance(obj, type(pd.Series()))
 |  
 |  mean_vec : pandas.Series, index (ts_list)
 |      Sample mean vector of observed vector time-series
 |          of data points in last learning window
 |      mean_vec.name = asof
 |      Mean value vector c in model expression
 |  
 |  stdev_vec : pandas.Series, index (ts_list)
 |      Sample standard deviation vector of observed
 |          vector time-series of data points in last
 |          learning window
 |      stdev_vec.name = asof
 |  
 |  vts_base_case : pd.DataFrame,
 |          index (ts_list), columns (asof_list)
 |      Standardized value, serving as base-case value, of
 |          observed vector time-series for dynamic factor
 |          model learning and inference
 |  
 |  dfm_loadings : dict,
 |              keys (0, 1, ..., var_order, 'DFM-II', 'asof')
 |          obj[key] : pd.DataFrame,
 |              index (ts_list), columns (factor_list)
 |      Loadings matrix of k-lag factors on observed vector
 |          time-series
 |      Estimated loadings matrix X(k) of DFM Form-I, and
 |          loadings matrix X of Form-II
 |  
 |  loadings_mat : pd.DataFrame,
 |          index (ts_list), columns (factor_list)
 |      Loadings matrix (of DFM Form-II in this LMDFM
 |          algorithm) of (0-lag) common dynamic factors
 |          on observed vector time-series
 |      loadings_mat = dfm_loadings['DFM-II']
 |  
 |  dfm_factors : pd.DataFrame,
 |          index (factor_list), columns (asof_list)
 |      Row time-series of dynamic factor score column
 |      Estimated factor score time-series, f(t), in dynamic
 |          factor model expression
 |      Note: len_factors = len_ts - var_order
 |  
 |  vts_base_comm : pd.DataFrame,
 |          index (ts_list), columns (asof_list)
 |      Common components, represented by dynamic common
 |          factors, of Standardized, or base-case, value
 |          of observed vector time-series
 |      Estimated by DFM factor loadings and factor scores
 |  
 |  vts_base_idio : pd.DataFrame,
 |          index (ts_list), columns (asof_list)
 |      Idiosyncratic components, not represented by dynamic
 |          factors, of Standardized, or base-case, value of
 |          observed vector time-series
 |      Estimated by
 |          vts_base_idio = vts_base_case.sub(vts_base_comm)
 |  
 |  vts_common : pd.DataFrame,
 |          index (ts_list), columns (asof_list)
 |      Common components of Standardized or Zero-mean or
 |          Original value of observed vector time-series
 |      Estimated by DFM factor loadings and factor scores
 |  
 |  vts_idiosync : pd.DataFrame,
 |          index (ts_list), columns (asof_list)
 |      Idiosyncratic components of Standardized or Zero-
 |          mean or Original value of observed vector
 |          time-series
 |      Estimated by removing common components from
 |          value of observed vector time-series
 |  
 |  var_dfm : dict, keys (1, 2, ..., var_order, 'asof')
 |          obj[k] : pd.DataFrame,
 |              index (factor_list), columns (factor_list)
 |      Vector autoregressive coefficient matrixes of dynamic
 |          common factor score vector time-series
 |      Estimated VAR coefficient matrix A(k) of factor f(t)
 |          in DFM Form II
 |  
 |  var_struct : dict, keys (0, 1, ..., var_order, 'asof')
 |          obj[k] : pd.DataFrame,
 |              index (factor_list), columns (ts_list)
 |      Structural VAR coefficient matrixes: k-th matrix mapping
 |          k-lag observed data y(t-k) to factor f(t) space
 |      Estimated structural VAR coefficient matrixes G(k) in
 |          LMDFM model expression 
 |  
 |  var_left : pd.DataFrame,
 |          index (ts_list), columns (factor_list)
 |      Left multiplier of DFM-based VAR model coefficient
 |          matrixes of observed vector time-series
 |      Estimated left multiplier BL of B(k) in LMDFM model
 |          expression 
 |  
 |  var_right : dict, keys (1, ..., var_order, 'asof')
 |          obj[k] = var_struct[k] : pd.DataFrame,
 |              index (factor_list), columns (ts_list)
 |      Right multiplier of DFM-based VAR model coefficient
 |          matrixes
 |      Estimated right multiplier BR(k) of B(k) in LMDFM
 |          model expression 
 |  
 |  dfs_serialcov : dict, keys ((-j, k), ..., 'R', 'asof')
 |              j in [0, 1, 2, ..., var_order]: time lag
 |              k in [0, 1, 2, ..., var_order]: sample lag
 |          obj[(-j, 0)] : pd.Series, index (factor_list)
 |          obj[(-j, k)] : pd.DataFrame,
 |              index / columns (factor_list), k >= 1
 |      Estimated current (j = 0) and past (-j <= -1)
 |          variance vector (k = 0) and k-lag autocovariance
 |          (serial-covariance) matrix (k >= 1) of dynamic
 |          factor score time-series
 |      Estimated current/past variance/autocovariance,
 |          Cov(f(t-j),f(t-j-k)), of dynamic factor scores
 |      Notes:
 |          obj['R']: variance of error (pd.Series) in VAR
 |              prediction of dynamic factor scores
 |  
 |  dfs_forecast : pd.DataFrame, index (factor_list),
 |          columns (1, 2, ..., max_forecast_step, 'asof')
 |      Out-of-sample multi-step forecasts of dynamic factor
 |          scores of observed vector time-series, with one
 |          specification, forecast_type
 |      Notes:
 |          forecast_type = 1 for DFM, 2 for VAR-factor, 3 for
 |              hybrid (default), 4 for VAR model, forecasts
 |  
 |  vts_forecast : pd.DataFrame, index (ts_list)
 |          columns (1, 2, ..., max_forecast_step, 'asof')
 |      Out-of-sample multi-step forecasts of target_type values
 |          of observed vector time-series, with two additional
 |          specifications, forecast_type and fwd_cumsum
 |      Notes:
 |          forecast_type = 1 for DFM, 2 for VAR-factor, 3 for
 |              hybrid (default), 4 for VAR model, forecasts
 |          target_type = 'standarized', 'base-case',
 |              'zero-mean', or 'original'
 |          fwd_cumsum = False or True
 |  
 |  vts_response : pd.DataFrame, index (ts_list)
 |          columns (1, 2, ..., max_forecast_step, 'asof')
 |      Out-of-sample multi-step forecasts of target_type value
 |          of response to impulse or shock vector at time t =
 |          asof, with one additional specification, fwd_cumsum
 |      Notes:
 |          target_type = 'standarized', 'base-case',
 |              'zero-mean', or 'original'
 |          fwd_cumsum = False or True
 |  
 |  dfs_variance : pd.DataFrame, index (factor_list),
 |          columns (0, 1, ..., max_forecast_step, 'asof')
 |      Out-of-sample multi-step forecasts of variance vectors
 |          of dynamic factor score time-series of observed
 |          vector time-series
 |      Notes:
 |          obj.loc[:, 0]: Estimated current, or nowcast of
 |              variance vector
 |  
 |  dfs_autocov : dict, keys ((s, k), ..., 'R', 'asof')
 |              s in [0, 1, ..., mx_forec_stp]: forec step
 |              k in [0, 1, 2, ..., var_order]: sample lag
 |          obj[(j, 0)] : pd.Series, index (factor_list)
 |          obj[(j, k)] : pd.DataFrame,
 |              index / columns (factor_list), k >= 1
 |      Forecasted (s >= 1) variance vector (k = 0) and
 |          k-lag autocovariance matrix (k >= 1) of dynamic
 |          factor score time-series
 |      Forecasted variance/autocovariance,
 |          Cov(f(t+s),f(t+s-k)), of dynamic factor scores
 |      Notes:
 |          obj['R']: variance of error (pd.Series) in VAR
 |              prediction of dynamic factor scores
 |  
 |  agg_variance : pd.Series,
 |          index (0, 1, ..., max_forecast_step, 'asof')
 |      Forecasted variances of aggregate value of target_type
 |          values of observed vector time-series, serving as
 |          aggregate variance forecasts
 |  
 |  agg_variance_comm : pd.Series,
 |          index (0, 1, ..., max_forecast_step, 'asof')
 |      Factor-based common components of forecasted variances
 |          of aggregate value of target_type values of
 |          observed vector time-series, forecasted by common
 |          dynamic factors of all observed time-series
 |  
 |  indiv_variance : pd.DataFrame,
 |          index (ts_list),
 |          columns (0, 1, ..., max_forecast_step, 'asof')
 |      Forecasted variance vectors of target_type values
 |          of individual observed multiple time-series,
 |          forecasted by common dynamic factors plus
 |          idiosyncratic variances of all observed time-
 |          series
 |  
 |  indiv_variance_comm : pd.DataFrame,
 |          index (ts_list),
 |          columns (0, 1, ..., max_forecast_step, 'asof')
 |      Factor-based common components of forecasted variances
 |          of target_type values of individual observed
 |          multiple time-series, forecasted by common dynamic
 |          factors of all observed time-series
 |  
 |  comm_varcov : dict,
 |              keys (0, 1, ..., max_forecast_step, 'asof')
 |          obj[key] : pd.DataFrame,
 |              index (ts_list), columns (ts_list)
 |      Forecasted variance-covariance matrix of factor-based
 |          common component time-series of observed vector
 |          time-series
 |      Notes:
 |          obj[0]: Estimated current variance-covariance
 |  
 |  idio_variance : pd.DataFrame, index (ts_list),
 |          columns (0, 1, ..., max_forecast_step, 'asof')
 |      Forecasted variance vector of idiosyncratic component
 |          time-series of observed vector time-series
 |      Notes:
 |          obj.loc[:, 0]: Estimated current variance vector
 |  
 |  vts_varcov : dict,
 |              keys (0, 1, ..., max_forecast_step, 'asof')
 |          obj[key] : pd.DataFrame,
 |              index (ts_list), columns (ts_list)
 |      Forecasted variance-covariance matrix of observed
 |          vector time-series
 |      Notes:
 |          obj[0]: Estimated current variance-covariance
 |  
 |  Methods
 |  -------
 |  
 |  For model initiation
 |      LMDFM()
 |      LMDFM(len_learn_window, var_order, num_factors,
 |          forecast_type, shock_list, max_forecast_step,
 |          target_type, fwd_cumsum)
 |      LMDFM_obj.set_param(len_learn_window, var_order,
 |          num_factors, forecast_type, shock_list,
 |          max_forecast_step, target_type, fwd_cumsum)
 |      LMDFM_obj.check_data(VTS)
 |      LMDFM_obj.set_data(VTS)
 |      LMDFM_obj.get_param(param_name_list)
 |      LMDFM_obj.get_target_type_list()
 |      LMDFM_obj.min_ts_len()
 |      LMDFM_obj.get_data_info()
 |  
 |  For model learning
 |      LMDFM_obj.fit()
 |      LMDFM_obj.get_mean()
 |      LMDFM_obj.get_stdev()
 |      LMDFM_obj.get_base_vts()
 |      LMDFM_obj.get_loadings(target_type)
 |      LMDFM_obj.get_factors()
 |      LMDFM_obj.get_base_comm()
 |      LMDFM_obj.get_base_idio()
 |      LMDFM_obj.get_common(target_type)
 |      LMDFM_obj.get_idiosync(target_type)
 |      LMDFM_obj.get_dfmVAR()
 |      LMDFM_obj.get_structVAR(target_type)
 |      LMDFM_obj.get_mtsVAR(target_type)
 |      LMDFM_obj.get_dfsSCov()
 |  
 |  For model inference
 |      LMDFM_obj.forecast(forecast_type)
 |      LMDFM_obj.predict(...) = LMDFM_obj.forecast(...)
 |      LMDFM_obj.response(shock_list)
 |      LMDFM_obj.varcovar()
 |      LMDFM_obj.get_forecast(target_type, fwd_cumsum)
 |      LMDFM_obj.get_response(target_type, fwd_cumsum)
 |      LMDFM_obj.get_varcov(target_type)
 |      LMDFM_obj.get_aggVar(target_type)
 |      LMDFM_obj.get_indivVar(target_type)
 |      LMDFM_obj.get_vcMatrix(target_type)
 |      LMDFM_obj.get_dfsACov()
 |  
 |  For variance-covariance benchmark
 |      LMDFM_obj.get_asof()
 |  
 |  For calculating var-cov matrix (static method)
 |      LMDFM.varcov_matrix(dfs_variance, loadings_mat, idio_variance)
 |  
 |  For iterative forecast
 |      LMDFM_obj.iterative_forecast(...)
 |  
 |  Notes on data
 |  -------------
 |  
 |  * VTS, for learning and for inference, input of method set_data(VTS)
 |  
 |  Methods defined here:
 |  
 |  __base_case_forecast__(self)
 |      Generate base-case forecasts of standardized time-series
 |          of observed vector time-series
 |      
 |      Returns
 |      -------
 |      
 |      dfs_forecast : pd.DataFrame, index (factor_list),
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of dynamic factor
 |              scores of observed vector time-series, with one
 |              specification, forecast_type
 |      
 |      vts_forecast : pd.DataFrame, index (ts_list)
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of target_type values
 |              of observed vector time-series, with two additional
 |              specifications, forecast_type and fwd_cumsum
 |      
 |      Notes:
 |          forecast_type = 1 for DFM, 2 for VAR-factor, 3 for
 |              hybrid (default), 4 for VAR model, forecasts
 |          target_type = 'standarized', 'base-case',
 |              'zero-mean', or 'original'
 |          fwd_cumsum = False or True
 |      
 |      Function call
 |      -------------
 |      
 |      dfs_forecast, vts_forecast = (
 |          self.__base_case_forecast__())
 |  
 |  __data_holder__(self)
 |      Initialize or reset data and related items
 |      
 |      Function call
 |      -------------
 |      
 |      self.__data_holder__()
 |  
 |  __forecast_adjustment__(self, vts_forecast)
 |      Adjust forecasts of vector time-series
 |      
 |      Arguments
 |      ---------
 |      
 |      vts_forecast : pd.DataFrame, index (ts_list)
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of target_type values
 |              of observed vector time-series, with two additional
 |              specifications, forecast_type and fwd_cumsum
 |      
 |      Returns
 |      -------
 |      
 |      vts_forecast : pd.DataFrame, index (ts_list)
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of target_type values
 |              of observed vector time-series, with two additional
 |              specifications, forecast_type and fwd_cumsum
 |      
 |      Notes:
 |          forecast_type = 1 for DFM, 2 for VAR-factor, 3 for
 |              hybrid (default), 4 for VAR model, forecasts
 |          target_type = 'standarized', 'base-case',
 |              'zero-mean', or 'original'
 |          fwd_cumsum = False or True
 |      
 |      Function call
 |      -------------
 |      
 |      vts_forecast = self.__forecast_adjustment__(vts_forecast)
 |  
 |  __init__(self, len_learn_window=None, var_order=None, num_factors=None, forecast_type=3, shock_list={}, max_forecast_step=1, target_type='Original', fwd_cumsum=False)
 |      Initialize object self
 |      
 |      Learning parameters
 |      -------------------
 |      
 |      len_learn_window : int >> 1
 |          Length of trailing time window of data points
 |              for model learning
 |      
 |      var_order : int >= 1
 |          Vector autoregressive order, p
 |      
 |      num_factors : int >= 1
 |          Number of factors of dynamic factor model DFM
 |      
 |      Inference parameters
 |      --------------------
 |      
 |      forecast_type : int {1, 2, 3, 4} (default = 3)
 |          Type of formulas to forecast factors and vector time-series
 |          If 1: DFM forecasts, by DFM Form I
 |          If 2: VAR-factor forecasts, by DFM Form II
 |          If 3: hybrid forecasts, by DFM Froms I and II
 |          If 4: VAR model forecasts, by DFM-based VAR model
 |      
 |      shock_list : dict {ts1id: val1, ts2id: val2, ...}
 |          List of shock(s) specified as shock_list = {
 |              ts1_id: val_ts1, ts2_id: val_ts2, ...}
 |      
 |      max_forecast_step : int >= 1
 |          Maximum number of forecasting steps of time-series
 |              forecasts, or shock-response time-series, or
 |              variance-covariance matrix forecasts
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |          If 's', 'S', 'standardized', 'b', 'B' or 'base-case':
 |              Inferences/forecasts are made/evaluated on
 |              standardized, or base-case, values of observed
 |              vector time-series
 |          If 'z', 'Z' or 'zero-mean':
 |              Inferences/forecasts are made/evaluated on zero-
 |              mean, or de-meaned, values of observed vector
 |              time-series
 |          If 'o', 'O' or 'original':
 |              Inferences/forecasts are made/evaluated on values
 |              of original/observed vector time-series
 |      
 |      fwd_cumsum : bool (True, or False)
 |          Whether or not to make cum-sum forecast
 |      
 |      Returns
 |      -------
 |      
 |      self : object
 |          Class instance itself
 |      
 |      Object initiation call
 |      ----------------------
 |      
 |      LMDFM_obj = LMDFM(param_name=param_value)
 |      
 |      LMDFM_obj = LMDFM(
 |          param1_name=param1_value,
 |          param2_name=param2_value, ...)
 |      
 |      LMDFM_obj = LMDFM(
 |          len_learn_window=len_learn_window,
 |          var_order=var_order,
 |          num_factors=num_factors,
 |          forecast_type=forecast_type,
 |          shock_list=shock_list,
 |          max_forecast_step=max_forecast_step,
 |          target_type=target_type,
 |          fwd_cumsum=fwd_cumsum)
 |  
 |  __is_fit__(self)
 |      Check whether model is learned with self.fit()
 |      
 |      Function call
 |      -------------
 |      
 |      self.__is_fit__()
 |  
 |  __param_validate__(self)
 |      Validate parameters input
 |      
 |      Raises
 |      ------
 |      
 |      TypeError
 |          If data type of a parameter not as specified
 |          
 |      ValueError
 |          If value of integer parameters not positive
 |          If var_order > len_learn_window
 |          If num_factors >= min(len_learn_window, num_ts)
 |          If len_ts < len_learn_window + (3 var_order)
 |          If value of string parameters not valid
 |      
 |      Function call
 |      -------------
 |      
 |      self.__param_validate__()
 |  
 |  __shock_response__(self)
 |      Generate vector time-series response to impulse or shock
 |          vector at time t = asof
 |      
 |      Inputs
 |      ------
 |      
 |      shock_list : dict {ts1id: val1, ts2id: val2, ...}
 |          List of shock(s) specified as shock_list = {
 |              ts1_id: val_ts1, ts2_id: val_ts2, ...}
 |      
 |      stdev_vec : pandas.Series, index (ts_list)
 |          Sample standard deviation vector of observed
 |              vector time-series of data points in last
 |              learning window
 |          stdev_vec.name = asof
 |      
 |      var_left : pd.DataFrame,
 |              index (ts_list), columns (factor_list)
 |          Left multiplier of DFM-based VAR model coefficient
 |              matrixes of observed vector time-series
 |      
 |      var_right : dict, keys (1, ..., var_order, 'asof')
 |              obj[k] = var_struct[k] : pd.DataFrame,
 |                  index (factor_list), columns (ts_list)
 |          Right multiplier of DFM-based VAR model coefficient
 |              matrixes
 |      
 |      Returns
 |      -------
 |      
 |      vts_response : pd.DataFrame, index (ts_list)
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of target_type value
 |              of response to impulse or shock vector at time t =
 |              asof, with one additional specification, fwd_cumsum
 |          Notes:
 |              target_type = 'standarized', 'base-case',
 |                  'zero-mean', or 'original'
 |              fwd_cumsum = False or True
 |      
 |      Function call
 |      -------------
 |      
 |      vts_response = self.__shock_response__()
 |  
 |  __take_param__(self, len_learn_window=None, var_order=None, num_factors=None, forecast_type=None, shock_list=None, max_forecast_step=None, target_type=None, fwd_cumsum=None)
 |      Take prameter values
 |      
 |      Arguments
 |      ---------
 |      
 |      len_learn_window : int
 |      var_order : int
 |      num_factors : int
 |      
 |      forecast_type : int
 |      shock_list : dict
 |      
 |      max_forecast_step : int
 |      target_type : str
 |      fwd_cumsum : bool
 |      
 |      Function call
 |      -------------
 |      
 |      self.__take_param__(
 |          len_learn_window=len_learn_window,
 |          var_order=var_order,
 |          num_factors=num_factors,
 |          forecast_type=forecast_type,
 |          shock_list=shock_list,
 |          max_forecast_step=max_forecast_step,
 |          target_type=target_type,
 |          fwd_cumsum=fwd_cumsum)
 |  
 |  __transform__(self, obj_in=None)
 |      Transform learning or inference data item of standardized
 |          base-case vector time-series back data item of zero-
 |          mean or original observed vector time-series
 |      
 |      Arguments
 |      ---------
 |      
 |      obj_in : dict, or pd.Series, or pd.DataFrame
 |          Object of data item to be transformed
 |      
 |      Inputs
 |      ------
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      Returns
 |      -------
 |      
 |      obj_out : type(obj_in)
 |          Object of data item being transformed
 |      
 |      Function call
 |      -------------
 |      
 |      obj_in = data
 |      obj_out = self.__transform__(obj_in=obj_in)
 |      data = obj_out
 |      
 |      obj_in = [a1, a2, ...]
 |      obj_out = ['a1', 'a2', ...]
 |      for k in list(range(len(obj_in))):
 |          obj_out[k] = self.__transform__(obj_in=obj_in[k])
 |      [a1, a2, ...] = obj_out
 |  
 |  __transform_pd__(self, obj_in=None, add_mean=False)
 |      Transform Pandas Series or DataFrame (learning or inference)
 |          data item of standardized base-case vector time-series
 |          back data item of zero-mean or original observed vector 
 |          time-series
 |      
 |      Arguments
 |      ---------
 |      
 |      obj_in : pd.Series, or pd.DataFrame
 |          Object of data item to be transformed
 |      
 |      add_mean : bool
 |          Whether to add mean_vec back into data
 |      
 |      Inputs
 |      ------
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      mean_vec : pandas.Series, index (ts_list)
 |          Sample mean vector of observed vector time-series
 |              of data points in last learning window
 |          mean_vec.name = asof
 |      
 |      stdev_vec : pandas.Series, index (ts_list)
 |          Sample standard deviation vector of observed
 |              vector time-series of data points in last
 |              learning window
 |          stdev_vec.name = asof
 |      
 |      num_ts_input : int
 |      
 |      num_ts : int
 |      
 |      ts_list_input : list
 |      
 |      ts_list : list
 |      
 |      Returns
 |      -------
 |      
 |      obj_out : type(obj_in)
 |          Object of data item being transformed
 |      
 |      Function call
 |      -------------
 |      
 |      obj_out = self.__transform_pd__(
 |          obj_in=obj_in)
 |      
 |      obj_out = self.__transform_pd__(
 |          obj_in=obj_in, add_mean=add_mean)
 |      
 |      obj_in = data 
 |      obj_out = self.__transform_pd__(
 |          obj_in=obj_in, add_mean=True)
 |      data = obj_out
 |  
 |  __var_left_right__(self)
 |      Get left multiplier of DFM-based VAR model coefficients
 |      
 |      Outputs
 |      -------
 |      
 |      var_left : pd.DataFrame,
 |          index (ts_list), columns (factor_list)
 |      
 |      var_right : dict, keys (1, ..., var_order, 'asof')
 |          obj[k] = var_struct[k] : pd.DataFrame,
 |              index (factor_list), columns (ts_list)
 |      
 |      Function call
 |      -------------
 |      
 |      self.__var_left_right__()
 |  
 |  check_data(self, VTS)
 |      Inspect observed vector time-series (VTS) data
 |      
 |      Raises
 |      ------
 |      
 |      TypeError
 |          If data type of VTS not pandas.DataFrame
 |      
 |      ValueError
 |          If VTS empty
 |          If len_ts < len_learn_window + (3 var_order)
 |          If num_ts <= num_factors
 |      
 |      Function call
 |      -------------
 |      
 |      (num_ts_input, len_ts_input, ts_list_input,
 |          asof_list_input, VTS_valid, num_ts, len_ts,
 |          ts_list, asof_list) = self.check_data(VTS)
 |      
 |      (num_ts_input, len_ts_input, ts_list_input,
 |          asof_list_input, VTS_valid, num_ts, len_ts,
 |          ts_list, asof_list) = LMDFM_obj.check_data(VTS)
 |  
 |  fit(self)
 |      Fit LMDFM model with observed vector time-series (VTS)
 |          data
 |      
 |      Inputs
 |      ------
 |      
 |      len_learn_window : int >> 1
 |          Length of trailing time window of data points
 |              for model learning
 |      
 |      var_order : int >= 1
 |          Vector autoregressive order, p
 |      
 |      num_factors : int >= 1
 |          Number of factors of dynamic factor model DFM
 |      
 |      VTS : pandas.DataFrame,
 |              index (ts_list), columns (observed_asof_list)
 |          Observed vector time-series
 |          Row time-series of column vector with first column
 |              as oldest and last one as latest
 |          Input of method set_data(VTS) for LMDFM model learning
 |              and inference
 |      
 |      ts_list : list
 |          List of time-series name/symbol/label string
 |      
 |      observed_asof_list : list
 |          List of as-of time-stamp of observed time-series
 |      
 |      Function call
 |      -------------
 |      
 |      self.fit()
 |      
 |      LMDFM_obj.fit()
 |  
 |  forecast(self, forecast_type=None)
 |      Generate base-case forecasts of dynamic factor score
 |          time-series and of observed vector time-series
 |      
 |      Arguments
 |      ---------
 |      
 |      forecast_type : int {1, 2, 3, 4} (default = 3)
 |          Type of formulas to forecast factors and vector time-series
 |          If 1: DFM forecasts, by DFM Form I
 |          If 2: VAR-factor forecasts, by DFM Form II
 |          If 3: hybrid forecasts, by DFM Froms I and II
 |          If 4: VAR model forecasts, by DFM-based VAR model
 |      
 |      Outputs
 |      -------
 |      
 |      dfs_forecast : pd.DataFrame, index (factor_list),
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of dynamic factor
 |              scores of observed vector time-series, with one
 |              specification, forecast_type
 |      
 |      vts_forecast : pd.DataFrame, index (ts_list)
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of target_type values
 |              of observed vector time-series, with two additional
 |              specifications, forecast_type and fwd_cumsum
 |      
 |      Notes:
 |          forecast_type = 1 for DFM, 2 for VAR-factor, 3 for
 |              hybrid (default), 4 for VAR model, forecasts
 |          target_type = 'standarized', 'base-case',
 |              'zero-mean', or 'original'
 |          fwd_cumsum = False or True
 |      
 |      Base-case values:
 |          target_type in [
 |              'standarized', 's', 'S', 'base-case', 'b', 'B']
 |          fwd_cumsum = False
 |      
 |      Function call
 |      -------------
 |      
 |      self.forecast()
 |      
 |      LMDFM_obj.forecast()
 |      
 |      LMDFM_obj.forecast(forecast_type=forecast_type)
 |  
 |  get_aggVar(self, target_type=None)
 |      Generate forecasted variance of aggregate value of
 |          target_type values of observed vector time-series,
 |          serving as data in evaluation of forecasted variance-
 |          covariance (of observed vector time-series)
 |      
 |      Arguments
 |      ---------
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      Inputs
 |      ------
 |      
 |      loadings_mat : pd.DataFrame,
 |              index (ts_list), columns (factor_list)
 |          Loadings matrix (of DFM Form-II in this LMDFM
 |              algorithm) of (0-lag) common dynamic factors
 |              on observed vector time-series
 |      
 |      dfs_variance : pd.DataFrame, index (factor_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of variance vectors
 |              of dynamic factor score time-series of observed
 |              vector time-series
 |          Notes:
 |              obj.loc[:, 0]: Estimated current, or nowcast of
 |                  variance vector
 |      
 |      idio_variance : pd.DataFrame, index (ts_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Forecasted variance vector of idiosyncratic component
 |              time-series of observed vector time-series
 |          Notes:
 |              obj.loc[:, 0]: Estimated current variance vector
 |      
 |      Returns
 |      -------
 |      
 |      agg_variance : pd.Series,
 |              index (0, 1, ..., max_forecast_step, 'asof')
 |          Forecasted variances of aggregate value of target_type
 |              values of observed vector time-series, serving as
 |              aggregate variance forecasts
 |      
 |      agg_variance_comm : pd.Series,
 |              index (0, 1, ..., max_forecast_step, 'asof')
 |          Factor-based common components of forecasted variances
 |              of aggregate value of target_type values of
 |              observed vector time-series, forecasted by common
 |              dynamic factors of all observed time-series
 |      
 |      Function call
 |      -------------
 |      
 |      agg_variance, agg_variance_comm = (
 |          LMDFM_obj.get_aggVar())
 |      
 |      agg_variance, agg_variance_comm = (
 |          LMDFM_obj.get_aggVar(target_type=target_type))
 |  
 |  get_asof(self)
 |      Get as-of times of estimates
 |          by model learning and for model inference
 |      
 |      Returns
 |      -------
 |      
 |      asof : time-stamp object
 |          Last time-stamp of observed vector time-series data
 |              utilized in estimation of values in object obj
 |          Examples:
 |              obj['asof'] = asof
 |                  when isinstance(obj, type(dict()))
 |              obj.loc['asof'] = asof
 |                  when isinstance(obj, type(pd.Series()))
 |              obj.loc[:, 'asof'] = asof
 |                  when isinstance(obj, type(pd.DataFrame()))
 |              obj.name = asof
 |                  when isinstance(obj, type(pd.Series()))
 |      
 |      Function call
 |      -------------
 |      
 |      asof = LMDFM_obj.get_asof()
 |  
 |  get_base_comm(self)
 |      Get common components, represented by dynamic common
 |          factors, of Standardized, or base-case, value of
 |          observed vector time-series
 |      
 |      Returns
 |      -------
 |      
 |      vts_base_comm : pd.DataFrame,
 |              index (ts_list), columns (asof_list)
 |          Common components, represented by dynamic common
 |              factors, of Standardized, or base-case, value
 |              of observed vector time-series
 |          Estimated by DFM factor loadings and factor scores
 |      
 |      Function call
 |      -------------
 |      
 |      self.get_base_comm()
 |      
 |      vts_base_comm = LMDFM_obj.get_base_comm()
 |  
 |  get_base_idio(self)
 |      Get idiosyncratic components, not represented by dynamic
 |          factors, of Standardized, or base-case, value of
 |          observed vector time-series
 |      
 |      Returns
 |      -------
 |      
 |      vts_base_idio : pd.DataFrame,
 |              index (ts_list), columns (asof_list)
 |          Idiosyncratic components, not represented by dynamic
 |              factors, of Standardized, or base-case, value of
 |              observed vector time-series
 |          Estimated by
 |              vts_base_idio = vts_base_case.sub(vts_base_comm)
 |      
 |      Function call
 |      -------------
 |      
 |      self.get_base_idio()
 |      
 |      vts_base_idio = LMDFM_obj.get_base_idio()
 |  
 |  get_base_vts(self)
 |      Get standardized vector time-series
 |      
 |      Returns
 |      -------
 |      
 |      vts_base_case : pd.DataFrame, 
 |              index (ts_list), columns (asof_list)
 |          Standardized value, serving as base-case value, of
 |              observed vector time-series for dynamic factor
 |              model learning and inference
 |      
 |      Function call
 |      -------------
 |      
 |      self.get_base_vts()
 |      
 |      vts_base_case = LMDFM_obj.get_base_vts()
 |  
 |  get_common(self, target_type=None)
 |      Get common components of vector time-series
 |      
 |      Arguments
 |      ---------
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      Returns
 |      -------
 |      
 |      vts_common : pd.DataFrame,
 |              index (ts_list), columns (asof_list)
 |          Common components of Standardized or Zero-mean or
 |              Original value of observed vector time-series
 |          Estimated by DFM factor loadings and factor scores
 |      
 |      Function call
 |      -------------
 |      
 |      vts_common = LMDFM_obj.get_common()
 |      
 |      vts_common = LMDFM_obj.get_common(
 |          target_type=target_type)
 |  
 |  get_data_info(self)
 |      Generate summary descriptions of observed vector
 |          time-series (VTS) data
 |      
 |      Returns
 |      -------
 |      
 |      data_info_dict : dict
 |          Summary description of dict type of observed
 |          vector time-series (VTS) data
 |      
 |      Function call
 |      -------------
 |      
 |      data_info_dict = LMDFM_obj.get_data_info()
 |  
 |  get_dfmVAR(self)
 |      Get vector autoressive coefficient matrices of dynamic factors
 |      
 |      Returns
 |      -------
 |      
 |      var_dfm : dict, keys (1, 2, ..., var_order, 'asof')
 |              obj[k] : pd.DataFrame,
 |                  index (factor_list), columns (factor_list)
 |          Vector autoregressive coefficient matrixes of dynamic
 |              common factor score vector time-series
 |          Estimated VAR coefficient matrix A(k) of factor f(t)
 |              in DFM Form II
 |      
 |      Function call
 |      -------------
 |      
 |      self.get_dfmVAR()
 |      
 |      var_dfm = LMDFM_obj.get_dfmVAR()
 |  
 |  get_dfsACov(self)
 |      Get forecasted diagonal variance and autocovariance of
 |          dynamic factor score time-series of observed vector
 |          time-series
 |      
 |      Returns
 |      -------
 |      
 |      dfs_autocov : dict, keys ((s, k), ..., 'R', 'asof')
 |                  s in [0, 1, ..., mx_forec_stp]: forec step
 |                  k in [0, 1, 2, ..., var_order]: sample lag
 |              obj[(j, 0)] : pd.Series, index (factor_list)
 |              obj[(j, k)] : pd.DataFrame,
 |                  index / columns (factor_list), k >= 1
 |          Forecasted (s >= 1) variance vector (k = 0) and
 |              k-lag autocovariance matrix (k >= 1) of dynamic
 |              factor score time-series
 |          Notes:
 |              obj['R']: variance of error (pd.Series) in VAR
 |                  prediction of dynamic factor scores
 |      
 |      Function call
 |      -------------
 |      
 |      self.get_dfsACov()
 |      
 |      dfs_autocov = LMDFM_obj.get_dfsACov()
 |  
 |  get_dfsSCov(self)
 |      Get estimated curent and past diagonal variance and
 |          autocovariance of dynamic factor score time-series
 |          of observed vector time-series
 |      
 |      Returns
 |      -------
 |      
 |      dfs_serialcov : dict, keys ((-j, k), ..., 'R', 'asof')
 |                  j in [0, 1, 2, ..., var_order]: time lag
 |                  k in [0, 1, 2, ..., var_order]: sample lag
 |              obj[(-j, 0)] : pd.Series, index (factor_list)
 |              obj[(-j, k)] : pd.DataFrame,
 |                  index / columns (factor_list), k >= 1
 |          Estimated current (j = 0) and past (-j <= -1)
 |              variance vector (k = 0) and k-lag autocovariance
 |              (serial-covariance) matrix (k >= 1) of dynamic
 |              factor score time-series
 |          Notes:
 |              obj['R']: variance of error (pd.Series) in VAR
 |                  prediction of dynamic factor scores
 |      
 |      Function call
 |      -------------
 |      
 |      self.get_dfsSCov()
 |      
 |      dfs_serialcov = LMDFM_obj.get_dfsSCov()
 |  
 |  get_factors(self)
 |      Get estimated dynamic factor scores time-series
 |      
 |      Returns
 |      -------
 |      
 |      dfm_factors : pd.DataFrame,
 |              index (factor_list), columns (asof_list)
 |          Row time-series of dynamic factor score column
 |          Estimated factor score time-series, f(t), in dynamic
 |              factor model expression
 |          Note: len_factors = len_ts - var_order
 |      
 |      Function call
 |      -------------
 |      
 |      self.get_factors()
 |      
 |      dfm_factors = LMDFM_obj.get_factors()
 |  
 |  get_forecast(self, target_type=None, fwd_cumsum=None)
 |      Get forecasts of dynamic factor score time-series and
 |          of observed vector time-series
 |      
 |      Arguments
 |      ---------
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      fwd_cumsum : bool (True, or False)
 |          Whether or not to make cum-sum forecast
 |      
 |      Returns
 |      -------
 |      
 |      dfs_forecast : pd.DataFrame, index (factor_list),
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of dynamic factor
 |              scores of observed vector time-series, with one
 |              specification, forecast_type
 |      
 |      vts_forecast : pd.DataFrame, index (ts_list)
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of target_type values
 |              of observed vector time-series, with two additional
 |              specifications, forecast_type and fwd_cumsum
 |      
 |      Notes:
 |          forecast_type = 1 for DFM, 2 for VAR-factor, 3 for
 |              hybrid (default), 4 for VAR model, forecasts
 |          target_type = 'standarized', 'base-case',
 |              'zero-mean', or 'original'
 |          fwd_cumsum = False or True
 |      
 |      Function call
 |      -------------
 |      
 |      dfs_forecast, vts_forecast = LMDFM_obj.get_forecast(
 |          target_type=target_type, fwd_cumsum=fwd_cumsum)
 |  
 |  get_idiosync(self, target_type=None)
 |      Get idiosyncratic components of vector time-series
 |      
 |      Arguments
 |      ---------
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      Returns
 |      -------
 |      
 |      vts_idiosync : pd.DataFrame,
 |              index (ts_list), columns (asof_list)
 |          Idiosyncratic components of Standardized or Zero-
 |              mean or Original value of observed vector
 |              time-series
 |          Estimated by removing common components from
 |              value of observed vector time-series
 |      
 |      Function call
 |      -------------
 |      
 |      vts_idiosync = LMDFM_obj.get_idiosync()
 |      
 |      vts_idiosync = LMDFM_obj.get_idiosync(
 |          target_type=target_type)
 |  
 |  get_indivVar(self, target_type=None)
 |      Generate forecasted variance of target_type values of
 |          individual observed time-series, serving as data
 |          in evaluation of forecasted variances (of observed
 |          vector time-series)
 |      
 |      Arguments
 |      ---------
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      Inputs
 |      ------
 |      
 |      loadings_mat : pd.DataFrame,
 |              index (ts_list), columns (factor_list)
 |          Loadings matrix (of DFM Form-II in this LMDFM
 |              algorithm) of (0-lag) common dynamic factors
 |              on observed vector time-series
 |      
 |      dfs_variance : pd.DataFrame, index (factor_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of variance vectors
 |              of dynamic factor score time-series of observed
 |              vector time-series
 |          Notes:
 |              obj.loc[:, 0]: Estimated current, or nowcast of
 |                  variance vector
 |      
 |      idio_variance : pd.DataFrame, index (ts_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Forecasted variance vector of idiosyncratic component
 |              time-series of observed vector time-series
 |          Notes:
 |              obj.loc[:, 0]: Estimated current variance vector
 |      
 |      Returns
 |      -------
 |      
 |      indiv_variance : pd.DataFrame,
 |              index (ts_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Forecasted variance vectors of target_type values
 |              of individual observed multiple time-series,
 |              forecasted by common dynamic factors plus
 |              idiosyncratic variances of all observed time-
 |              series
 |      
 |      indiv_variance_comm : pd.DataFrame,
 |              index (ts_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Factor-based common components of forecasted variances
 |              of target_type values of individual observed
 |              multiple time-series, forecasted by common dynamic
 |              factors of all observed time-series
 |      
 |      Function call
 |      -------------
 |      
 |      indiv_variance, indiv_variance_comm = (
 |          LMDFM_obj.get_indivVar())
 |      
 |      indiv_variance, indiv_variance_comm = (
 |          LMDFM_obj.get_indivVar(target_type=target_type))
 |  
 |  get_loadings(self, target_type=None)
 |      Get DFM loadings matrix
 |      
 |      Arguments
 |      ---------
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      Returns
 |      -------
 |      
 |      dfm_loadings : dict, 
 |                  keys (0, 1, ..., var_order, 'DFM-II', 'asof')
 |              obj[key] : pd.DataFrame,
 |                  index (ts_list), columns (factor_list)
 |          Loadings matrix of k-lag factors on observed vector
 |              time-series
 |          Estimated loadings matrix X(k) of DFM Form-I, and
 |              loadings matrix X of Form-II
 |      
 |      loadings_mat : pd.DataFrame,
 |              index (ts_list), columns (factor_list)
 |          Loadings matrix (of DFM Form-II in this LMDFM
 |              algorithm) of (0-lag) common dynamic factors
 |              on observed vector time-series
 |          loadings_mat = dfm_loadings['DFM-II']
 |      
 |      Function call
 |      -------------
 |      
 |      self.get_loadings()
 |      
 |      dfm_loadings, loadings_mat = LMDFM_obj.get_loadings()
 |      
 |      dfm_loadings, loadings_mat = LMDFM_obj.get_loadings(
 |          target_type=target_type)
 |  
 |  get_mean(self)
 |      Get sample mean vector of vector time-series
 |      
 |      Returns
 |      -------
 |      
 |      mean_vec : pandas.Series, index (ts_list)
 |          Sample mean vector of observed vector time-series
 |              of data points in last learning window
 |          mean_vec.name = asof
 |          Mean value vector c in model expression
 |      
 |      Function call
 |      -------------
 |      
 |      self.get_mean()
 |      
 |      mean_vec = LMDFM_obj.get_mean()
 |  
 |  get_mtsVAR(self, target_type=None)
 |      Get left and right multipliers of DFM-based VAR model
 |          coefficient matrix of vector time-series
 |      
 |      Arguments
 |      ---------
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      Returns
 |      -------
 |      
 |      var_left : pd.DataFrame,
 |              index (ts_list), columns (factor_list)
 |          Left multiplier of DFM-based VAR model coefficient
 |              matrixes of observed vector time-series
 |      
 |      var_right : dict, keys (1, ..., var_order, 'asof')
 |              obj[k] = var_struct[k] : pd.DataFrame,
 |                  index (factor_list), columns (ts_list)
 |          Right multiplier of DFM-based VAR model coefficient
 |              matrixes
 |      
 |      Function call
 |      -------------
 |      
 |      self.get_mtsVAR()
 |      
 |      var_left, var_right = LMDFM_obj.get_mtsVAR()
 |      
 |      var_left, var_right = LMDFM_obj.get_mtsVAR(
 |          target_type=target_type)
 |  
 |  get_param(self, param_name_list)
 |      Get values of specified parameters
 |      
 |      Arguments
 |      ---------
 |      
 |      param_name_list : list [str]
 |          list of names of parameters
 |      
 |      Returns
 |      -------
 |      
 |      param_dict : dict {str: obj}
 |          dict of name and value of specified parameters
 |      
 |      Function call
 |      -------------
 |      
 |      param_dict = LMDFM_obj.get_param(param_name_list)
 |  
 |  get_response(self, target_type=None, fwd_cumsum=None)
 |      Get response to impulse or shock in vector time-series
 |          data
 |      
 |      Arguments
 |      ---------
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      fwd_cumsum : bool (True, or False)
 |          Whether or not to make cum-sum forecast
 |      
 |      Returns
 |      -------
 |      
 |      vts_response : pd.DataFrame, index (ts_list)
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of target_type value
 |              of response to impulse or shock vector at time t =
 |              asof, with one additional specification, fwd_cumsum
 |          Notes:
 |              target_type = 'standarized', 'base-case',
 |                  'zero-mean', or 'original'
 |              fwd_cumsum = False or True
 |      
 |      Function call
 |      -------------
 |      
 |      vts_response = LMDFM_obj.get_response(
 |          target_type=target_type, fwd_cumsum=fwd_cumsum)
 |  
 |  get_stdev(self)
 |      Get sample standard deviation vector of vector time-series
 |      
 |      Returns
 |      -------
 |      
 |      stdev_vec : pandas.Series, index (ts_list)
 |          Sample standard deviation vector of observed
 |              vector time-series of data points in last
 |              learning window
 |          stdev_vec.name = asof
 |      
 |      Function call
 |      -------------
 |      
 |      self.get_stdev()
 |      
 |      stdev_vec = LMDFM_obj.get_stdev()
 |  
 |  get_structVAR(self, target_type=None)
 |      Get structural VAR coefficients to estimate factors by
 |          observed data
 |      
 |      Arguments
 |      ---------
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      Returns
 |      -------
 |      
 |      var_struct : dict, keys (0, 1, ..., var_order, 'asof')
 |              obj[k] : pd.DataFrame,
 |                  index (factor_list), columns (ts_list)
 |          Structural VAR coefficient matrixes: k-th matrix mapping
 |              k-lag observed data y(t-k) to factor f(t) space
 |          Estimated structural VAR coefficient matrixes G(k) in
 |              LMDFM model expression 
 |      
 |      Function call
 |      -------------
 |      
 |      self.get_structVAR()
 |      
 |      var_struct = LMDFM_obj.get_structVAR()
 |      
 |      var_struct = LMDFM_obj.get_structVAR(
 |          target_type=target_type)
 |  
 |  get_target_type_list(self)
 |      Get list of valid parameter target_type
 |      
 |      Returns
 |      -------
 |      
 |      target_type_list = [
 |          'original', 'Original', 'o', 'O',
 |          'zero-mean', 'Zero-mean', 'z', 'Z',
 |          'standardized', 'Standardized', 's', 'S',
 |          'base-case', 'Base-case', 'b', 'B']
 |      
 |      Function call
 |      -------------
 |      
 |      target_type_list = LMDFM_obj.get_target_type_list()
 |  
 |  get_varcov(self, target_type=None)
 |      Get data matrix and matrix time-series (factor loadings
 |          matrix, forecasted variance vector of common dynamic
 |          factors, and forecasted variance vector of
 |          idiosyncratic component time-series) for calculating
 |          forecasted variance-covariance matrixes of observed
 |          vector time-series
 |      
 |      Arguments
 |      ---------
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      Returns
 |      -------
 |      
 |      loadings_mat : pd.DataFrame,
 |              index (ts_list), columns (factor_list)
 |          Loadings matrix (of DFM Form-II in this LMDFM
 |              algorithm) of (0-lag) common dynamic factors
 |              on observed vector time-series
 |      
 |      dfs_variance : pd.DataFrame, index (factor_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of variance vectors
 |              of dynamic factor score time-series of observed
 |              vector time-series
 |          Notes:
 |              obj.loc[:, 0]: Estimated current, or nowcast of
 |                  variance vector
 |      
 |      idio_variance : pd.DataFrame, index (ts_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Forecasted variance vector of idiosyncratic component
 |              time-series of observed vector time-series
 |          Notes:
 |              obj.loc[:, 0]: Estimated current variance vector
 |      
 |      Function call
 |      -------------
 |      
 |      loadings_mat, dfs_variance, idio_variance = (
 |          self.get_varcov())
 |      
 |      loadings_mat, dfs_variance, idio_variance = (
 |          self.get_varcov(target_type=target_type))
 |      
 |      loadings_mat, dfs_variance, idio_variance = (
 |          LMDFM_obj.get_varcov())
 |      
 |      loadings_mat, dfs_variance, idio_variance = (
 |          LMDFM_obj.get_varcov(target_type=target_type))
 |  
 |  get_vcMatrix(self, target_type=None)
 |      Get forecasted variance-covariance matrix of observed
 |          vector time-series and its two components, forecasted
 |          variance-covariance matrix of factor-based common
 |          component time-series and forecasted variance vector
 |          of idiosyncratic component time-series
 |      
 |      Arguments
 |      ---------
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      Inputs
 |      ------
 |      
 |      loadings_mat : pd.DataFrame,
 |              index (ts_list), columns (factor_list)
 |          Loadings matrix (of DFM Form-II in this LMDFM
 |              algorithm) of (0-lag) common dynamic factors
 |              on observed vector time-series
 |      
 |      dfs_variance : pd.DataFrame, index (factor_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of variance vectors
 |              of dynamic factor score time-series of observed
 |              vector time-series
 |          Notes:
 |              obj.loc[:, 0]: Estimated current, or nowcast of
 |                  variance vector
 |      
 |      idio_variance : pd.DataFrame, index (ts_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Forecasted variance vector of idiosyncratic component
 |              time-series of observed vector time-series
 |          Notes:
 |              obj.loc[:, 0]: Estimated current variance vector
 |      
 |      Returns
 |      -------
 |      
 |      comm_varcov : dict,
 |                  keys (0, 1, ..., max_forecast_step, 'asof')
 |              obj[key] : pd.DataFrame,
 |                  index (ts_list), columns (ts_list)
 |          Forecasted variance-covariance matrix of factor-based
 |              common component time-series of observed vector
 |              time-series
 |          Notes:
 |              obj[0]: Estimated current variance-covariance
 |      
 |      idio_variance : pd.DataFrame, index (ts_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Forecasted variance vector of idiosyncratic component
 |              time-series of observed vector time-series
 |          Notes:
 |              obj.loc[:, 0]: Estimated current variance vector
 |      
 |      vts_varcov : dict,
 |                  keys (0, 1, ..., max_forecast_step, 'asof')
 |              obj[key] : pd.DataFrame,
 |                  index (ts_list), columns (ts_list)
 |          Forecasted variance-covariance matrix of observed
 |              vector time-series
 |          Notes:
 |              obj[0]: Estimated current variance-covariance
 |      
 |      Function call
 |      -------------
 |      
 |      comm_varcov, idio_variance, vts_varcov = (
 |          LMDFM_obj.get_vcMatrix())
 |      
 |      comm_varcov, idio_variance, vts_varcov = (
 |          LMDFM_obj.get_vcMatrix(target_type=target_type))
 |  
 |  iterative_forecast(self, max_num_iter=10, iter_tol=0.001, target_type=None, fwd_cumsum=None)
 |      Generate iterative forecasts of vector time-series
 |      
 |      Iteration
 |      ---------
 |      
 |      Initial values
 |          y(t+s-k) = 0 for s > k
 |      
 |      Iterative forecasts
 |          f(t+s) = G(0) y(t+s) + G(1) y(t+s-1) + ... + G(p) y(t+s-p)
 |          y(t+s) = X(0) f(t+s) + X(1) f(t+s-1) + ... + X(p) f(t+s-p)
 |      
 |      Note:
 |          Using realized data when k >= s, i.e. s-k <= 0
 |              f(t+s-k|t) = f(t+s-k)
 |              y(t+s-k|t) = y(t+s-k)
 |      
 |      Arguments
 |      ---------
 |      
 |      max_num_iter : int (default = 10)
 |          Max number of iterations for iterative forecasts
 |      
 |      iter_tol : float > 0 and << 1 (default = 0.001)
 |          Tolerance level to end iteration for iterative forecast
 |              = relative absolute increment
 |              = (sum of absolute increments) / (sum of absolute forec)
 |      
 |      Notes:
 |          Iteration ends when either max_num_iter OR iter_tol is met
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |      
 |      fwd_cumsum : bool (True, or False)
 |          Whether or not to make cum-sum forecast
 |      
 |      Returns
 |      -------
 |      
 |      dfs_forecast : pd.DataFrame, index (factor_list),
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of dynamic factor
 |              scores of observed vector time-series, with one
 |              specification, forecast_type
 |      
 |      vts_forecast : pd.DataFrame, index (ts_list)
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of target_type values
 |              of observed vector time-series, with two additional
 |              specifications, forecast_type and fwd_cumsum
 |      
 |      Notes:
 |          forecast_type = 1 for DFM, 2 for VAR-factor, 3 for
 |              hybrid (default), 4 for VAR model, forecasts
 |          target_type = 'standarized', 'base-case',
 |              'zero-mean', or 'original'
 |          fwd_cumsum = False or True
 |      
 |      Function call
 |      -------------
 |      
 |      dfs_forecast, vts_forecast = LMDFM_obj.iterative_forecast()
 |      
 |      dfs_forecast, vts_forecast = LMDFM_obj.iterative_forecast(
 |          max_num_iter=10, iter_tol=0.001, target_type=None,
 |          fwd_cumsum=None)
 |  
 |  min_ts_len(self)
 |      Get minimum length of time-series to satisfy parameters
 |          of dynamic factor model analysis
 |      
 |      Returns
 |      -------
 |      
 |      min_len_ts : int
 |          Minimum length of time-series for DFM analysis
 |      
 |      Function call
 |      -------------
 |      
 |      min_len_ts = self.min_ts_len()
 |      
 |      min_len_ts = LMDFM_obj.min_ts_len()
 |  
 |  predict(self, forecast_type=None)
 |      Generate base-case forecasts of dynamic factor score
 |          time-series and of observed vector time-series
 |      
 |      Outputs
 |      -------
 |      
 |      dfs_forecast : pd.DataFrame, index (factor_list),
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of dynamic factor
 |              scores of observed vector time-series, with one
 |              specification, forecast_type
 |      
 |      vts_forecast : pd.DataFrame, index (ts_list)
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of target_type values
 |              of observed vector time-series, with two additional
 |              specifications, forecast_type and fwd_cumsum
 |      
 |      Notes:
 |          forecast_type = 1 for DFM, 2 for VAR-factor, 3 for
 |              hybrid (default), 4 for VAR model, forecasts
 |          target_type = 'standarized', 'base-case',
 |              'zero-mean', or 'original'
 |          fwd_cumsum = False or True
 |      
 |      Base-case values:
 |          target_type in [
 |              'standarized', 's', 'S', 'base-case', 'b', 'B']
 |          fwd_cumsum = False
 |      
 |      Function call
 |      -------------
 |      
 |      LMDFM_obj.predict()
 |      
 |      LMDFM_obj.predict(forecast_type=forecast_type)
 |  
 |  response(self, shock_list=None)
 |      Generate response to impulse or shock in vector time-
 |          series data
 |      
 |      Arguments
 |      ---------
 |      
 |      shock_list : dict {ts1id: val1, ts2id: val2, ...}
 |          List of shock(s) specified as shock_list = {
 |              ts1_id: val_ts1, ts2_id: val_ts2, ...}
 |      
 |      Returns
 |      -------
 |      
 |      vts_response : pd.DataFrame, index (ts_list)
 |              columns (1, 2, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of target_type value
 |              of response to impulse or shock vector at time t =
 |              asof, with one additional specification, fwd_cumsum
 |          Notes:
 |              target_type = 'standarized', 'base-case',
 |                  'zero-mean', or 'original'
 |              fwd_cumsum = False or True
 |      
 |      Function call
 |      -------------
 |      
 |      self.response()
 |      
 |      LMDFM_obj.response()
 |      
 |      LMDFM_obj.response(shock_list=shock_list)
 |  
 |  set_data(self, VTS)
 |      Set, or reset, observed vector time-series (VTS) data
 |      
 |      Arguments
 |      ---------
 |      
 |      VTS : pandas.DataFrame,
 |              index (ts_list), columns (observed_asof_list)
 |          Observed vector time-series
 |          Row time-series of column vector with first column
 |              as oldest and last one as latest
 |          Input of method set_data(VTS) for LMDFM model learning
 |              and inference
 |      
 |      ts_list : list
 |          List of time-series name/symbol/label string
 |      
 |      observed_asof_list : list
 |          List of as-of time-stamp of observed time-series
 |      
 |      num_ts : int >= 1
 |          Number of time-series = len(ts_list)
 |      
 |      len_ts : int > 1
 |          Length of time-series = len(observed_asof_list)
 |          len_ts >= len_learn_window + (3 var_order)
 |      
 |      Function call
 |      -------------
 |      
 |      LMDFM_obj.set_data(VTS)
 |  
 |  set_param(self, len_learn_window=None, var_order=None, num_factors=None, forecast_type=None, shock_list=None, max_forecast_step=None, target_type=None, fwd_cumsum=None)
 |      Set, update or reset value(s) of any, some or all parameter(s)
 |      
 |      Learning parameters
 |      -------------------
 |      
 |      len_learn_window : int >> 1
 |          Length of trailing time window of data points
 |              for model learning
 |      
 |      var_order : int >= 1
 |          Vector autoregressive order, p
 |      
 |      num_factors : int >= 1
 |          Number of factors of dynamic factor model DFM
 |      
 |      Inference parameters
 |      --------------------
 |      
 |      forecast_type : int {1, 2, 3, 4} (default = 3)
 |          Type of formulas to forecast factors and vector time-series
 |          If 1: DFM forecasts, by DFM Form I
 |          If 2: VAR-factor forecasts, by DFM Form II
 |          If 3: hybrid forecasts, by DFM Froms I and II
 |          If 4: VAR model forecasts, by DFM-based VAR model
 |      
 |      shock_list : dict {ts1id: val1, ts2id: val2, ...}
 |          List of shock(s) specified as shock_list = {
 |              ts1_id: val_ts1, ts2_id: val_ts2, ...}
 |      
 |      max_forecast_step : int >= 1
 |          Maximum number of forecasting steps of time-series
 |              forecasts, or shock-response time-series, or
 |              variance-covariance matrix forecasts
 |      
 |      target_type : str, in [
 |              's', 'S', 'standardized', 'b', 'B', 'base-case',
 |              'z', 'Z', 'zero-mean', 'o', 'O', 'original']
 |          Specified type of vector, or multiple, time-series data
 |              on which model inferences, predictions or forecasts
 |              are made, and are evaluated
 |          If 's', 'S', 'standardized', 'b', 'B' or 'base-case':
 |              Inferences/forecasts are made/evaluated on
 |              standardized, or base-case, values of observed
 |              vector time-series
 |          If 'z', 'Z' or 'zero-mean':
 |              Inferences/forecasts are made/evaluated on zero-
 |              mean, or de-meaned, values of observed vector
 |              time-series
 |          If 'o', 'O' or 'original':
 |              Inferences/forecasts are made/evaluated on values
 |              of original/observed vector time-series
 |      
 |      fwd_cumsum : bool (True, or False)
 |          Whether or not to make cum-sum forecast
 |      
 |      Function call
 |      -------------
 |      
 |      LMDFM_obj.set_param(**kwargs)
 |      
 |      LMDFM_obj.set_param(
 |          param_name=param_value)
 |      
 |      LMDFM_obj.set_param(
 |          param1_name=param1_value,
 |          param2_name=param2_value, ...)
 |      
 |      LMDFM_obj.set_param(
 |          len_learn_window=len_learn_window,
 |          var_order=var_order,
 |          num_factors=num_factors,
 |          forecast_type=forecast_type,
 |          shock_list=shock_list,
 |          max_forecast_step=max_forecast_step,
 |          target_type=target_type,
 |          fwd_cumsum=fwd_cumsum)
 |  
 |  varcovar(self)
 |      Generate (1) forecasted variance vector, and autocovariance
 |          vectors, of common dynamic factor score time-series;
 |          (2) components of forecasted variance-covariance matrix
 |          of factor-based common component vector time-series;
 |          and (3) forecasted variance vector of idiosyncratic
 |          or residual component vector time-series
 |      
 |      Inputs
 |      ------
 |      
 |      loadings_mat : pd.DataFrame,
 |              index (ts_list), columns (factor_list)
 |          Loadings matrix (of DFM Form-II in this LMDFM
 |              algorithm) of (0-lag) common dynamic factors
 |              on observed vector time-series
 |          loadings_mat = dfm_loadings['DFM-II']
 |      
 |      var_dfm : dict, keys (1, 2, ..., var_order, 'asof')
 |              obj[k] : pd.DataFrame,
 |                  index (factor_list), columns (factor_list)
 |          Vector autoregressive coefficient matrixes of dynamic
 |              common factor score vector time-series
 |      
 |      dfs_serialcov : dict, keys ((-j, k), ..., 'R', 'asof')
 |                  j in [0, 1, 2, ..., var_order]: time lag
 |                  k in [0, 1, 2, ..., var_order]: sample lag
 |              obj[(-j, 0)] : pd.Series, index (factor_list)
 |              obj[(-j, k)] : pd.DataFrame,
 |                  index / columns (factor_list), k >= 1
 |          Estimated current (j = 0) and past (-j <= -1)
 |              variance vector (k = 0) and k-lag autocovariance
 |              (serial-covariance) matrix (k >= 1) of dynamic
 |              factor score time-series
 |          Notes:
 |              obj['R']: variance of error (pd.Series) in VAR
 |                  prediction of dynamic factor scores
 |      
 |      vts_base_idio : pd.DataFrame,
 |              index (ts_list), columns (asof_list)
 |          Idiosyncratic components, not represented by dynamic
 |              factors, of Standardized, or base-case, value of
 |              observed vector time-series
 |      
 |      Outputs
 |      -------
 |      
 |      dfs_variance : pd.DataFrame, index (factor_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of variance vectors
 |              of dynamic factor score time-series of observed
 |              vector time-series
 |          Notes:
 |              obj.loc[:, 0]: Estimated current, or nowcast of
 |                  variance vector
 |      
 |      dfs_autocov : dict, keys ((s, k), ..., 'R', 'asof')
 |                  s in [0, 1, ..., mx_forec_stp]: forec step
 |                  k in [0, 1, 2, ..., var_order]: sample lag
 |              obj[(j, 0)] : pd.Series, index (factor_list)
 |              obj[(j, k)] : pd.DataFrame,
 |                  index / columns (factor_list), k >= 1
 |          Forecasted (s >= 1) variance vector (k = 0) and
 |              k-lag autocovariance matrix (k >= 1) of dynamic
 |              factor score time-series
 |          Notes:
 |              obj['R']: variance of error (pd.Series) in VAR
 |                  prediction of dynamic factor scores
 |      
 |      idio_variance : pd.DataFrame, index (ts_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Forecasted variance vector of idiosyncratic component
 |              time-series of observed vector time-series
 |          Notes:
 |              obj.loc[:, 0]: Estimated current variance vector
 |      
 |      Function call
 |      -------------
 |      
 |      self.varcovar()
 |      
 |      LMDFM_obj.varcovar()
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  varcov_matrix(loadings_mat=None, dfs_variance=None, idio_variance=None)
 |      Calculate forecasted variance-covariance matrix of observed
 |          vector time-series based on (1) single contemporary
 |          common factor loadings matrix, (2) forecasted variance
 |          vector of dynamic factor score time-series, and (3)
 |          forecasted variance vector of idiosyncratic component
 |          vector time-series
 |      
 |      Note: this is a static method
 |      
 |      Arguments
 |      ---------
 |      
 |      loadings_mat : pd.DataFrame,
 |              index (ts_list), columns (factor_list)
 |          Loadings matrix (of DFM Form-II in this LMDFM
 |              algorithm) of (0-lag) common dynamic factors
 |              on observed vector time-series
 |          loadings_mat = dfm_loadings['DFM-II']
 |      
 |      dfs_variance : pd.DataFrame, index (factor_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Out-of-sample multi-step forecasts of variance vectors
 |              of dynamic factor score time-series of observed
 |              vector time-series
 |          Notes:
 |              obj.loc[:, 0]: Estimated current, or nowcast of
 |                  variance vector
 |      
 |      idio_variance : pd.DataFrame, index (ts_list),
 |              columns (0, 1, ..., max_forecast_step, 'asof')
 |          Forecasted variance vector of idiosyncratic component
 |              time-series of observed vector time-series
 |          Notes:
 |              obj.loc[:, 0]: Estimated current variance vector
 |      
 |      Returns
 |      -------
 |      
 |      vts_varcov : dict,
 |                  keys (0, 1, ..., max_forecast_step, 'asof')
 |              obj[key] : pd.DataFrame,
 |                  index (ts_list), columns (ts_list)
 |          Forecasted variance-covariance matrix of observed
 |              vector time-series
 |          Notes:
 |              obj[0]: Estimated current variance-covariance
 |      
 |      comm_varcov : dict,
 |                  keys (0, 1, ..., max_forecast_step, 'asof')
 |              obj[key] : pd.DataFrame,
 |                  index (ts_list), columns (ts_list)
 |          Forecasted variance-covariance matrix of factor-based
 |              common component time-series of observed vector
 |              time-series
 |          Notes:
 |              obj[0]: Estimated current variance-covariance
 |      
 |      Function call
 |      -------------
 |      
 |      vts_varcov = LMDFM.varcov_matrix(
 |          loadings_mat=loadings_mat, dfs_variance=dfs_variance,
 |          idio_variance=idio_variance)
 |      
 |      comm_varcov = LMDFM.varcov_matrix(
 |          loadings_mat=loadings_mat, dfs_variance=dfs_variance)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)

>>>
